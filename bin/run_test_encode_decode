#! /usr/bin/env bash

panic()
{
	echo "ERROR: $*"
	exit 1
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

self_dir="$(dirname "$0")" || panic

cmake_source_dir="$CMAKE_SOURCE_DIR"
cmake_binary_dir="$CMAKE_BINARY_DIR"

if [ -z "$cmake_source_dir" ]; then
	cmake_source_dir="$self_dir/.."
fi
if [ -z "$cmake_binary_dir" ]; then
	cmake_binary_dir="$self_dir/../tmp_cmake"
fi

top_dir="$cmake_source_dir"
data_dir="$top_dir/data"

encode_mesh="$cmake_binary_dir/src/encode_mesh"
decode_mesh="$cmake_binary_dir/src/decode_mesh"

tmp_dir_template="/tmp/edgebreaker-XXXXXXXX"
cleanup=1
view_mesh=0

while getopts :VC option; do
	case "$option" in
	V)
		view_mesh=1;;
	C)
		cleanup=0;;
	*)
		usage "invalid option $OPTARG";;
	esac
done
shift $((OPTIND - 1))

if [ ! -x "$encode_mesh" ]; then
	panic "$encode_mesh does not exist"
fi
if [ ! -x "$decode_mesh" ]; then
	panic "$decode_mesh does not exist"
fi

in_files=(
	#"$data_dir"/2h.off
	"$data_dir"/meng_report_example_1.off
	"$data_dir"/meng_report_example_2.off
	"$data_dir"/meng_report_example_3.off
	"$data_dir"/meng_report_example_4.off
)

if [ "${#in_files[@]}" -eq 0 ]; then
	in_files=(
		"$data_dir"/*.off
	)
fi

tmp_dir="$(mktemp -d "$tmp_dir_template")" || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

passed_tests=()
failed_tests=()

for in_file in "${in_files[@]}"; do

	echo "============================================================"
	test="$(basename "$in_file" .off)" || panic "basename failed"
	echo "Test: $test"

	enc_file="$tmp_dir/enc_file.eb"
	dec_file="$tmp_dir/dec_file.off"
	diff_file="$tmp_dir/diff"

	for file in "$enc_file" "$dec_file" "$diff_file"; do
		if [ -e "$file" ]; then
			rm -f "$file" || panic
		fi
	done

	"$encode_mesh" < "$in_file" > "$enc_file"
	enc_status=$?

	"$decode_mesh" < "$enc_file" > "$dec_file"
	dec_status=$?

	if [ "$enc_status" -ne 0 -o "$dec_status" -ne 0 ]; then
		echo "test $test failed with status $enc_status $dec_status"
		failed_tests+=("$test")
	else
		passed_tests+=("$test")
	fi

	if [ "$enc_status" -eq 0 -a "$dec_status" -eq 0 ]; then
		if [ "$view_mesh" -ne 0 ]; then
			echo "viewing $in_file"
			meshlab "$in_file"
			echo "viewing $dec_file"
			meshlab "$dec_file"
		fi
		diff "$in_file" "$dec_file" > "$diff_file"
		diff_status=$?
		if [ "$diff_status" -ne 0 ]; then
			echo "Due to quantization, the vertex coordinates may differ."
			echo "========== START OF DIFF =========="
			cat "$diff_file"
			echo "========== END OF DIFF =========="
		fi
	fi

done

exit_status=0

echo "============================================================"

echo "number of passed tests: ${#passed_tests[@]}"
echo "number of failed tests: ${#failed_tests[@]}"

if [ "${#failed_tests[@]}" -ne 0 ]; then
	echo "The following tests failed:"
	for test in "${failed_tests[@]}"; do
		echo "    $test"
	done
	exit_status=1
fi

echo "============================================================"

exit "$exit_status"
